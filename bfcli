#!/bin/bash

not_true() {
    if echo "$1" | grep -qi "true"; then
        return 1
    else
        return 0
    fi
}

export_environment_variables() {
  # installation dir
  local bash_files_dir="$HOME/.bash_files"
  if [[ -n "$BASH_FILES_DIR_OVERWRITE" ]]; then
    bash_files_dir="$BASH_FILES_DIR_OVERWRITE"
  fi
  export BASH_FILES_DIR="$bash_files_dir"
#   echo "BASH_FILES_DIR=$BASH_FILES_DIR"

  # repos dir
  export BASH_FILES_REPOS_DIR="$BASH_FILES_DIR/repos"
#   echo "BASH_FILES_REPOS_DIR=$BASH_FILES_REPOS_DIR"

  # config
  export BF_REPOS_CONFIG_FILE_DEFAULT="$BASH_FILES_DIR/config/repos_config.json"
  local bf_repos_config_file=$BF_REPOS_CONFIG_FILE_DEFAULT
  if [ -n "$BF_REPOS_CONFIG_FILE_OVERWRITE" ]; then
      bf_repos_config_file="$BF_REPOS_CONFIG_FILE_OVERWRITE"
  fi
  export BF_REPOS_CONFIG_FILE=$bf_repos_config_file
#   echo "BF_REPOS_CONFIG_FILE=$BF_REPOS_CONFIG_FILE"
  export BF_INIT_PROFILES_FILE="$BASH_FILES_DIR/init_profiles"
  export BF_BIN_DIR="$BASH_FILES_DIR/bin"
  export PATH="$PATH:$BF_BIN_DIR"
}

list_repos() {
  jq -r '.repos[].name' "$BF_REPOS_CONFIG_FILE"
}

# Helper function to get repo details
get_repo_details() {
    local repo_name=$1
    local repo_attribute=$2

    # Fetch repo details from repos array
    repo_details=$(jq -r --arg repo_name "$repo_name" '.repos[] | select(.name == $repo_name)' "$BF_REPOS_CONFIG_FILE")
    
    # Extract the specific attribute from repo_details
    repo_value=$(echo "$repo_details" | jq -r ".$repo_attribute")
    
    # If repo_value is null or not defined, fetch from defaults
    if [[ $repo_value == "null" || -z $repo_value ]]; then
        repo_value=$(jq -r --arg repo_attribute "$repo_attribute" '.defaults[$repo_attribute]' "$BF_REPOS_CONFIG_FILE")
    fi
    
    echo "$repo_value"
}

# Function to clone repositories
clone_all_repos() {
    local repos_root=$BASH_FILES_REPOS_DIR
    local clone_hash_file="$BASH_FILES_DIR/clone_hash"
    local current_clone_hash

    echo "Cloning all repositories to $repos_root"

    # Read all repos from the config file
    if [ ! -f "$BF_REPOS_CONFIG_FILE" ]; then
        echo "Config file not found at $BF_REPOS_CONFIG_FILE."
        echo "Please add a config file"
        print_help
        return 1
    fi

    # Calculate the current clone hash
    current_clone_hash=$(jq -S . "$BF_REPOS_CONFIG_FILE" | cksum | awk '{print $1}')

    # Compare with the previously saved clone hash
    if [ -f "$clone_hash_file" ]; then
        previous_clone_hash=$(cat "$clone_hash_file")
        if [ "$current_clone_hash" == "$previous_clone_hash" ]; then
            echo "Clone hash has not changed. Skipping cloning."
            return 0
        fi
    fi

    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")
    if [ -z "$repos" ]; then
        echo "No repositories found to clone. Please add repositories to the config file."
        return 1
    fi
    echo
    echo "== Initiating Cloning =="
    echo
    echo "List of repos to clone:"
    echo $repos
    echo
    echo "== Cloning Repositories =="
    echo

    # Iterate over each repo in the JSON array
    for repo in $repos; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')
        source_bash_files=$(echo "$repo" | jq -r '.source_bash_files // empty')
        clone_command=$(echo "$repo" | jq -r '.clone_command // empty')

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [ ! -d "$repo_dir" ]; then
            if [[ -n $clone_command ]]; then
                echo "Cloning $repo_url into $repo_dir using custom command"
                eval "$clone_command"
            else
                echo "Cloning $repo_url into $repo_dir"
                git clone "$repo_url" "$repo_dir"
            fi
        else
            echo "Skipping clone: $repo_url (already exists)"
        fi
        if not_true "$source_bash_files"; then
            echo "source_bash_files disabled for $repo_name"
            if [ -f "$repo_dir/.bfignore" ]; then
                if [ "$(cat "$repo_dir/.bfignore")" != "*" ]; then
                    TIMESTAMP=$(date +"%Y%m%d%H%M%S")
                    mv "$repo_dir/.bfignore" "$repo_dir/.bfignore_bak_$TIMESTAMP"
                    echo "Backing .bfignore up to .bfignore_bak_$TIMESTAMP"
                fi
            fi
            echo "*" > "$repo_dir/.bfignore"
            echo >> "$repo_dir/.bfignore"
            echo "!/.bfinit" >> "$repo_dir/.bfignore"
            if [ ! -f "$repo_dir/.bfinit" ]; then
                echo "echo Initialization not implemented: $repo_dir/.bfinit" > "$repo_dir/.bfinit"
                echo "Initialization skipped: $repo_dir/.bfinit"
            fi
        fi
        # the following line allows to use, the packages from repos, cloned before the current repo
        # gfiles && sfiles
    done

    # Save the current clone hash
    echo "$current_clone_hash" > "$clone_hash_file"
}



# Function to handle auto pull
auto_pull_repos() {
    local repos_root=$BASH_FILES_REPOS_DIR

    echo "Auto-pulling changes for repositories with auto_pull enabled"

    # Read all repos from the config file
    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")
    default_auto_pull=$(jq -r '.defaults.enable_auto_pull // false' "$BF_REPOS_CONFIG_FILE")

    # Iterate over each repo in the JSON array
    echo "$repos" | while IFS= read -r repo; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')
        repo_auto_pull=$(echo "$repo" | jq -r '.enable_auto_pull // empty')

        # Use default value if auto_pull is not specified
        if [[ -z $repo_auto_pull ]]; then
            repo_auto_pull=$default_auto_pull
        fi

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [[ $repo_auto_pull == "true" ]]; then
            echo "Auto-pulling changes for $repo_name"
            if [[ -d $repo_dir ]]; then
                cd "$repo_dir" && git pull
            else
                echo "Directory $repo_dir does not exist. Skipping $repo_name."
            fi
        else
            echo "Auto-pull is disabled for $repo_name"
        fi
    done
}

show_repos_status() {
    echo "====== git status for all repos ======"
    local repos_root=$BASH_FILES_REPOS_DIR

    # Read all repos from the config file
    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")

    # Iterate over each repo in the JSON array
    echo "$repos" | while IFS= read -r repo; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [[ -d $repo_dir ]]; then
            cd "$repo_dir"
            repo_status=$(git status --porcelain)
            if [[ -n $repo_status ]]; then
                echo
                echo "Status for $repo_name:"
                echo "$repo_status"
            fi
        else
            echo "Directory $repo_dir does not exist. Skipping $repo_name."
        fi
    done
    echo
    echo "======================================"
}



# Function to handle auto push
auto_push_repos() {
    local repos_root=$BASH_FILES_REPOS_DIR

    echo "Auto-pushing changes for repositories with auto_push enabled"

    # Read all repos from the config file
    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")
    default_auto_push=$(jq -r '.defaults.enable_auto_push // false' "$BF_REPOS_CONFIG_FILE")

    # Iterate over each repo in the JSON array
    echo "$repos" | while IFS= read -r repo; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')
        repo_auto_push=$(echo "$repo" | jq -r '.enable_auto_push // empty')

        # Use default value if auto_push is not specified
        if [[ -z $repo_auto_push ]]; then
            repo_auto_push=$default_auto_push
        fi

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [[ $repo_auto_push == "true" ]]; then
            echo "Auto-pushing changes for $repo_name"
            if [[ -d $repo_dir ]]; then
                cd "$repo_dir"

                # Add all changes
                git add .

                # Commit with a human-readable timestamp and "Auto Commit" prefix
                commit_message="Auto Commit - $(date +"%Y-%m-%d %H:%M:%S")"
                git commit -m "$commit_message"

                # Push changes
                git push
            else
                echo "Directory $repo_dir does not exist. Skipping $repo_name."
            fi
        else
            echo "Auto-push is disabled for $repo_name"
        fi
    done
}

function config_help {
    echo "
    Usage: bfcli config [options]

    Options:
        [-u, --url] <url>               The URL of the repository to clone.
        -b, --branch <branch>           The branch of the repository to clone.
                                        If not specified, the default branch is used.
    
    If no option is passed, first params is considered to be the url
    
    Example config repo:
    https://github.com/gndps/dbf_config/tree/main

    Example init:
    bfcli config https://github.com/gndps/dbf_config.git

    "
}

function config {
    local url=""
    local branch=""
    local BACKUP_DIR=""

    # Iterate through the arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -u|--url)
                url="$2"
                shift 2
                ;;
            -b|--branch)
                branch="$2"
                shift 2
                ;;
            -h|--help)
                config_help
                return 0
                ;;
            *)
                if [[ -z $url ]]; then
                    url="$1"
                else
                    echo "Invalid option: $1" >&2
                    config -h
                    return 1
                fi
                shift
                ;;
        esac
    done

    # Check if URL is provided
    if [[ -z $url ]]; then
        echo "Error: URL is required"
        config_help
        return 1
    fi

    # Backup existing config directory if it exists
    if [ -d "$BASH_FILES_DIR/config" ]; then
        TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        BACKUP_DIR="$BASH_FILES_DIR/config_bak_$TIMESTAMP"
        echo "Backing up existing config directory to $BACKUP_DIR"
        mv "$BASH_FILES_DIR/config" "$BACKUP_DIR"
    fi

    mkdir -p $BASH_FILES_DIR/config
    if [ -n "$branch" ]; then
        git clone $url -b $branch $BASH_FILES_DIR/config
    else
        git clone $url $BASH_FILES_DIR/config
    fi
    
    # Check if the clone was successful
    if [[ $? -ne 0 ]]; then
        if [[ -n $BACKUP_DIR ]]; then
            rm -rf "$BASH_FILES_DIR/config"
            mv "$BACKUP_DIR" "$BASH_FILES_DIR/config"
        fi
        echo "Error: git clone failed."
        echo "Config restored from backup due to error"
        return 1
    fi
}

install_init_profiles() {
    # Read profiles from file
    profiles=$(cat "$BF_INIT_PROFILES_FILE")
    
    # Iterate over profiles
    for profile in $profiles; do
        if ! install_profile "$profile"; then
            echo "Error: Failed to install profile $profile"
            return 1
        fi
    done
}

run_init() {
    clone_all_repos && \
    gfiles && \
    sfiles
}

run_init_wrapper() {
    if [ "$TIME_BASH_FILE" == "true" ]; then
        TIMEFORMAT="Load time: %R"
        init_cmd="time run_init"
    else
        init_cmd="run_init"
    fi
    eval $init_cmd && \
    echo && \
    echo ==================================== && \
    echo Bash files initialization complete && \
    echo ==================================== && \
    echo
}

source_without_init() {
    sfiles
}

init_existing_profile() {
    if [[ -f $BASH_FILES_DIR/init_profiles ]]; then
        source_without_init && \
        echo "Source files list: $BASH_FILES_DIR/init/.bflist"
        echo "Source files regeneration command: bfcli init <profile>"
        echo "Activated profiles:" && \
        cat $BASH_FILES_DIR/init_profiles && \
        echo "== Bash files activated =="
        echo
    elif [ "$(ls -A $BASH_FILES_DIR/config 2> /dev/null)" ]; then
        echo "Bash files can be activated using: bfcli init"
        echo
    else
        echo "Warning: Bash files installed but not initialized"
        echo "At this point, you can use bfcli config <bf_config_repo> or bfcli add <bf_compatible_repo>"
        echo
        echo "Example:"
        echo "bfcli config https://github.com/gndps/dbf_config.git"
        echo
        echo "Please refer to github readme for detailed information:"
        echo "https://github.com/gndps/dot_bash_files/tree/main?tab=readme-ov-file"
        echo
        echo "=========================================="
    fi
}

bfcli() {
    if [[ "$1" == "init" ]]; then
        # check config exist
        if [[ -z "$(ls -A "$BASH_FILES_DIR/config")" ]]; then
            echo "ERROR: Can't use init without configuring bash files"
            echo "ERROR: Please use the following command to configure bash files:"
            echo "bfcli config"
            return 1
        fi
        
        shift
        # check profile passed on init
        if [[ $# -eq 0 ]]; then
            if [[ -s "$BF_INIT_PROFILES_FILE" ]]; then
                echo ""
                echo "No init profile specified in bfcli init"
                echo "Using existing profiles in $BF_INIT_PROFILES_FILE to initialize.."
                install_init_profiles
            else
                echo "Error: At least one profile must be provided for 'init' option."
                install_profile # this will print list of profiles
            fi
            return 1
        fi
    
        # write & install init profiles
        echo "$@" > "$BF_INIT_PROFILES_FILE" && install_init_profiles && \
        run_init_wrapper
    elif [[ "$1" == "update" ]]; then
        run_init_wrapper
    elif [[ "$1" == "pull" ]]; then
        auto_pull_repos
    elif [[ "$1" == "push" ]]; then
        echo "It's safe to pull before push, so pulling first..."
        auto_pull_repos && auto_push_repos
    elif [[ "$1" == "status" ]]; then
        show_repos_status
    elif [[ "$1" == "config" ]]; then
        shift
        config "$@" && \
        echo "== Configuration Successful ==" && \
        echo && \
        echo "Next step: bfcli init <profile>" && \
        install_profile
    elif [[ "$1" == "add" ]]; then
        echo "Not implemented yet"
    elif [[ "$1" == "time" ]]; then
        toggle TIME_BASH_FILE
        echo "TIME_BASH_FILE: $TIME_BASH_FILE"
    elif [[ "$1" == "fast" ]]; then
        toggle BASH_FILES_FAST
        echo "BASH_FILES_FAST: $BASH_FILES_FAST"
    elif [[ "$1" == "debug" ]]; then
        toggle BASH_FILES_DEBUG_FLAG
        echo "BASH_FILES_DEBUG_FLAG: $BASH_FILES_DEBUG_FLAG"
    elif [[ "$1" == "list" ]]; then
        cat $BASH_FILES_DIR/init/.bflist
    elif [[ "$1" == "ignore" ]]; then
        cat $BASH_FILES_DIR/.bfignore_merged
    elif [[ "$1" == "help" || "$1" == "--help" || "$1" == "-h" ]]; then
        print_help
    else
      bfcli --help
      install_profile
    fi
}

print_help() {
    # Help message to display usage instructions
    echo "
    Usage: bfcli [option] [additional arguments]

    Options:
    init [profile1] [profile2] ...   Initialize environment, clone repos, source files.
    update                         Update environment and source files.
    pull                             Automatically pull repositories.
    push                             Automatically push repositories.
    status                           Show git status for all repos
    config [options]                 Configure the bfcli config file.
    add                              Not implemented yet
    list                             List the source files
    ignore                           List the ignored files
    time                             Toggle TIME_BASH_FILE variable.
    fast                             Toggle BASH_FILES_FAST variable. (used by appendrc)
    help                             Display this help message.


    Example usage:
    bfcli init <profile>
    bfcli update
    bfcli pull
    bfcli push
    bfcli status
    bfcli config -u <url> -b <branch>
    bfcli time
    bfcli fast
    bfcli help

    Config options:
    $(config -h)

    "
    
}

echo "== Init bash files =="
export_environment_variables
source $BASH_FILES_DIR/init/main
source $BASH_FILES_DIR/init/bfcli_utils
if [ "$TIME_BASH_FILE" == "true" ]; then
    TIMEFORMAT="Load time: %R"
    time init_existing_profile
else
    init_existing_profile
fi
