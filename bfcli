#!/bin/bash

export_environment_variables() {
  # installation dir
  local bash_files_dir="$HOME/.bash_files"
  if [[ -n "$BASH_FILES_DIR_OVERWRITE" ]]; then
    bash_files_dir="$BASH_FILES_DIR_OVERWRITE"
  fi
  export BASH_FILES_DIR="$bash_files_dir"
  echo "BASH_FILES_DIR=$BASH_FILES_DIR"

  # repos dir
  export BASH_FILES_REPOS_DIR="$BASH_FILES_DIR/repos"
  echo "BASH_FILES_REPOS_DIR=$BASH_FILES_REPOS_DIR"

  # config
  export BF_REPOS_CONFIG_FILE_DEFAULT="$BASH_FILES_DIR/config/repos_config.json"
  local bf_repos_config_file=$BF_REPOS_CONFIG_FILE_DEFAULT
  if [ -n "$BF_REPOS_CONFIG_FILE_OVERWRITE" ]; then
      bf_repos_config_file="$BF_REPOS_CONFIG_FILE_OVERWRITE"
  fi
  export BF_REPOS_CONFIG_FILE=$bf_repos_config_file
  echo "BF_REPOS_CONFIG_FILE=$BF_REPOS_CONFIG_FILE"
}

list_repos() {
  jq -r '.repos[].name' "$BF_REPOS_CONFIG_FILE"
}

# Helper function to get repo details
get_repo_details() {
    local repo_name=$1
    local repo_attribute=$2

    # Fetch repo details from repos array
    repo_details=$(jq -r --arg repo_name "$repo_name" '.repos[] | select(.name == $repo_name)' "$BF_REPOS_CONFIG_FILE")
    
    # Extract the specific attribute from repo_details
    repo_value=$(echo "$repo_details" | jq -r ".$repo_attribute")
    
    # If repo_value is null or not defined, fetch from defaults
    if [[ $repo_value == "null" || -z $repo_value ]]; then
        repo_value=$(jq -r --arg repo_attribute "$repo_attribute" '.defaults[$repo_attribute]' "$BF_REPOS_CONFIG_FILE")
    fi
    
    echo "$repo_value"
}

# Function to clone repositories
clone_all_repos() {
    local repos_root=$BASH_FILES_REPOS_DIR

    echo "Cloning all repositories to $repos_root"

    # Read all repos from the config file
    if [ ! -f "$BF_REPOS_CONFIG_FILE" ]; then
        echo "Config file not found at $BF_REPOS_CONFIG_FILE."
        echo "Please add a config file"
        print_help
        return 1
    fi
    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")
    if [ -z "$repos" ]; then
        echo "No repositories found to clone. Please add repositories to the config file."
        return 1
    fi
    echo
    echo "== Initiating Cloning =="
    echo
    echo "List of repos to clone:"
    echo $repos
    echo
    echo "== Cloning Repsitories =="
    echo

    # Iterate over each repo in the JSON array
    echo "$repos" | while IFS= read -r repo; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [ ! -d "$repo_dir" ]; then
            echo "Cloning $repo_url into $repo_dir"
            git clone "$repo_url" "$repo_dir"
        else
            echo "Skipping clone: $repo_url (already exists)"
        fi
    done
}


# Function to handle auto pull
auto_pull_repos() {
    local repos_root=$BASH_FILES_REPOS_DIR

    echo "Auto-pulling changes for repositories with auto_pull enabled"

    # Read all repos from the config file
    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")
    default_auto_pull=$(jq -r '.defaults.enable_auto_pull // false' "$BF_REPOS_CONFIG_FILE")

    # Iterate over each repo in the JSON array
    echo "$repos" | while IFS= read -r repo; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')
        repo_auto_pull=$(echo "$repo" | jq -r '.enable_auto_pull // empty')

        # Use default value if auto_pull is not specified
        if [[ -z $repo_auto_pull ]]; then
            repo_auto_pull=$default_auto_pull
        fi

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [[ $repo_auto_pull == "true" ]]; then
            echo "Auto-pulling changes for $repo_name"
            if [[ -d $repo_dir ]]; then
                cd "$repo_dir" && git pull
            else
                echo "Directory $repo_dir does not exist. Skipping $repo_name."
            fi
        else
            echo "Auto-pull is disabled for $repo_name"
        fi
    done
}


# Function to handle auto push
auto_push_repos() {
    local repos_root=$BASH_FILES_REPOS_DIR

    echo "Auto-pushing changes for repositories with auto_push enabled"

    # Read all repos from the config file
    repos=$(jq -c '.repos[]' "$BF_REPOS_CONFIG_FILE")
    default_auto_push=$(jq -r '.defaults.enable_auto_push // false' "$BF_REPOS_CONFIG_FILE")

    # Iterate over each repo in the JSON array
    echo "$repos" | while IFS= read -r repo; do
        # Extract repo details using jq
        repo_name=$(echo "$repo" | jq -r '.name // empty')
        repo_url=$(echo "$repo" | jq -r '.url')
        repo_auto_push=$(echo "$repo" | jq -r '.enable_auto_push // empty')

        # Use default value if auto_push is not specified
        if [[ -z $repo_auto_push ]]; then
            repo_auto_push=$default_auto_push
        fi

        # Default the directory name to the repo name or part of the URL if name is missing
        if [[ -z $repo_name ]]; then
            repo_name=$(basename "$repo_url" .git)
        fi

        repo_dir="$repos_root/$repo_name"

        if [[ $repo_auto_push == "true" ]]; then
            echo "Auto-pushing changes for $repo_name"
            if [[ -d $repo_dir ]]; then
                cd "$repo_dir"

                # Add all changes
                git add .

                # Commit with a human-readable timestamp and "Auto Commit" prefix
                commit_message="Auto Commit - $(date +"%Y-%m-%d %H:%M:%S")"
                git commit -m "$commit_message"

                # Push changes
                git push
            else
                echo "Directory $repo_dir does not exist. Skipping $repo_name."
            fi
        else
            echo "Auto-push is disabled for $repo_name"
        fi
    done
}

function config_help {
    echo "
    Usage: bfcli config [options]

    Options:
        -u, --url <url>                The URL of the repository to clone.
        -b, --branch <branch>           The branch of the repository to clone.
                                        If not specified, the default branch is used.
    "
}

function config {
    local url=""
    local branch=""
    local BACKUP_DIR=""

    # Iterate through the arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -u|--url)
                url="$2"
                shift 2
                ;;
            -b|--branch)
                branch="$2"
                shift 2
                ;;
            -h|--help)
                config_help
                return 0
                ;;
            *)
                if [[ -z $url ]]; then
                    url="$1"
                else
                    echo "Invalid option: $1" >&2
                    config -h
                    return 1
                fi
                shift
                ;;
        esac
    done

    # Check if URL is provided
    if [[ -z $url ]]; then
        echo "Error: URL is required"
        config_help
        return 1
    fi

    # Backup existing config directory if it exists
    if [ -d "$BASH_FILES_DIR/config" ]; then
        TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        BACKUP_DIR="$BASH_FILES_DIR/config_bak_$TIMESTAMP"
        echo "Backing up existing config directory to $BACKUP_DIR"
        mv "$BASH_FILES_DIR/config" "$BACKUP_DIR"
    fi

    mkdir -p $BASH_FILES_DIR/config
    if [ -n "$branch" ]; then
        git clone $url -b $branch $BASH_FILES_DIR/config
    else
        git clone $url $BASH_FILES_DIR/config
    fi
    
    # Check if the clone was successful
    if [[ $? -ne 0 ]]; then
        if [[ -n $BACKUP_DIR ]]; then
            rm -rf "$BASH_FILES_DIR/config"
            mv "$BACKUP_DIR" "$BASH_FILES_DIR/config"
        fi
        echo "Error: git clone failed."
        echo "Config restored from backup due to error"
        return 1
    fi
}


bfcli() {
    if [[ "$1" == "init" ]]; then
        shift
        if [[ $# -eq 0 ]]; then
            echo "Error: At least one profile must be provided for 'init' option."
            install_profile # this will print list of profiles
            return 1
        fi

        # Configure additional profiles, if any
        for profile in "$@"; do
            install_profile "$profile"
        done 

        # source $HOME/.bash_profile
        # echo "sourced $HOME/.bash_profile"
        clone_all_repos && \
        generate_file_list_and_source_files && \
        echo && \
        echo ==================================== && \
        echo Bash files initialization complete && \
        echo ==================================== && \
        echo
    elif [[ "$1" == "pull" ]]; then
        auto_pull_repos
    elif [[ "$1" == "push" ]]; then
        echo "It's safe to pull before push, so pulling first..."
        auto_pull_repos && auto_push_repos
    elif [[ "$1" == "config" ]]; then
        shift
        config "$@"
    elif [[ "$1" == "help" || "$1" == "--help" || "$1" == "-h" ]]; then
        print_help
    else
      bfcli --help
      install_profile
    fi
}

print_help() {
    # Help message to display usage instructions
    echo "
    Usage: bfcli [option] [additional arguments]

    Options:
    init [profile1] [profile2] ...   Initialize environment, clone repos, source files.
    pull                             Automatically pull repositories.
    push                             Automatically push repositories.
    config [options]              Configure the bfcli config file.
    help                             Display this help message.

    Config options:
    $(config -h)

    "
    
}

export_environment_variables
source $BASH_FILES_DIR/init/main
